// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: task.proto

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerClient interface {
	NewTask(ctx context.Context, in *ReqNewTask, opts ...grpc.CallOption) (*ReplyNewTask, error)
	StartTask(ctx context.Context, in *ReqNewTask, opts ...grpc.CallOption) (*ReplyNewTask, error)
	ReportState(ctx context.Context, in *ReqReport, opts ...grpc.CallOption) (*ReplyReport, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) NewTask(ctx context.Context, in *ReqNewTask, opts ...grpc.CallOption) (*ReplyNewTask, error) {
	out := new(ReplyNewTask)
	err := c.cc.Invoke(ctx, "/msg.TaskManager/NewTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) StartTask(ctx context.Context, in *ReqNewTask, opts ...grpc.CallOption) (*ReplyNewTask, error) {
	out := new(ReplyNewTask)
	err := c.cc.Invoke(ctx, "/msg.TaskManager/StartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) ReportState(ctx context.Context, in *ReqReport, opts ...grpc.CallOption) (*ReplyReport, error) {
	out := new(ReplyReport)
	err := c.cc.Invoke(ctx, "/msg.TaskManager/ReportState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
// All implementations must embed UnimplementedTaskManagerServer
// for forward compatibility
type TaskManagerServer interface {
	NewTask(context.Context, *ReqNewTask) (*ReplyNewTask, error)
	StartTask(context.Context, *ReqNewTask) (*ReplyNewTask, error)
	ReportState(context.Context, *ReqReport) (*ReplyReport, error)
	mustEmbedUnimplementedTaskManagerServer()
}

// UnimplementedTaskManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (UnimplementedTaskManagerServer) NewTask(context.Context, *ReqNewTask) (*ReplyNewTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTask not implemented")
}
func (UnimplementedTaskManagerServer) StartTask(context.Context, *ReqNewTask) (*ReplyNewTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedTaskManagerServer) ReportState(context.Context, *ReqReport) (*ReplyReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportState not implemented")
}
func (UnimplementedTaskManagerServer) mustEmbedUnimplementedTaskManagerServer() {}

// UnsafeTaskManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServer will
// result in compilation errors.
type UnsafeTaskManagerServer interface {
	mustEmbedUnimplementedTaskManagerServer()
}

func RegisterTaskManagerServer(s grpc.ServiceRegistrar, srv TaskManagerServer) {
	s.RegisterService(&TaskManager_ServiceDesc, srv)
}

func _TaskManager_NewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).NewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.TaskManager/NewTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).NewTask(ctx, req.(*ReqNewTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.TaskManager/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).StartTask(ctx, req.(*ReqNewTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_ReportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).ReportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.TaskManager/ReportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).ReportState(ctx, req.(*ReqReport))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManager_ServiceDesc is the grpc.ServiceDesc for TaskManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTask",
			Handler:    _TaskManager_NewTask_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _TaskManager_StartTask_Handler,
		},
		{
			MethodName: "ReportState",
			Handler:    _TaskManager_ReportState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
